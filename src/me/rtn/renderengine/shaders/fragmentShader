#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec4 toLightVector;
inv vec3 toCamera

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColour;
uniform float shineDamer;
uniform float reflectivity;

void main(void){

    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitLightVector = normalize(toLightVector);

    float nDotl = dot(unitNormal, unitLightVector);
    float brightness = max(nDotl, 0.0);
    vec3 diffuse = brightness * lightColour;

    vec3 unitVectorToCamera = normalize(toCameraVector);
    vec3 lightDirection = -unitLightVector;

    out_Color = vec4(diffuse,1.0) * texture(textureSampler, pass_textureCoords);
}